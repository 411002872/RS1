#include <iostream>
#include <string>
#include <cstring>
#include <string.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <cmath>
using namespace std;

///////////////////////////////////////////////////////CACHE CLASS////////////////////////////////////////////////////////////////
class Cache_class
{
    public:
        int cache_capacity;
        int associativity;
        int blocksize;
        char replacement_policy;
    
    void init(int cache_capacity, int associativity, int blocksize);
    int get_cache_block_number (int cache_capacity, int blocksize);
    int get_set_number (int cache_block_number, int associativity);

};

void Cache_class::init(int cache_capacity, int associativity, int blocksize){                 //Cache initialization
    cache_capacity=cache_capacity;
    associativity=associativity;
    replacement_policy=replacement_policy;
};

int Cache_class::get_cache_block_number (int cache_capacity, int blocksize){                  // Calculate Block number in the cache
    return cache_capacity/blocksize;
};
int Cache_class::get_set_number (int cache_block_number, int associativity){                  // Calculate Set number in the cache
    return cache_block_number/associativity;
};


unsigned long long int get_address( char* address, int length){                              // Get the address from instruction and turn the address to an int type
    long long int addr;
    int i;
    string t;
    for(i=2;i<length;i++){                                                                  // Concatenate char one by one. Turn address into string type first.
    t = t + *(address+i);
    }
    addr = stoull(t,nullptr,16);                                                            // using stoull turn address into int type.

    return addr;
};


////////////////////////////////////////////////////////////////////RANDOM REPLACEMENT POLICY//////////////////////////////////////////////////////////////

void Rreplacement(unsigned long long int *array,int address,int associativity,unsigned long long int tag,int tagbits){                                                        
    srand ((int)(time (NULL)));                                                             // Set random seed
    int random_index = rand()%associativity;                                                // Get random number within the range of associativity
    array[random_index]=1;                                                                  
    array[random_index]=(array[random_index]<<tagbits)+tag;                                 // Replace the victim

};
